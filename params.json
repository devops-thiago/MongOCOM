{"name":"MongOCOM","tagline":"Mongo Object-COllection Mapper","body":"### Welcome to MongOCOM Project Page.\r\nMongo Object-Collection Mapper (MongOCOM) is an Object-oriented document mapper for [mongoDB](http://mongodb.org).\r\n\r\n### Make your code readable.\r\nUsing simple annotation concepts you can model your database easily, like this:\r\n\r\n```java\r\npackage com.example.collections;\r\n\r\nimport com.arquivolivre.mongocom.annotations.Document;\r\nimport com.arquivolivre.mongocom.annotations.ObjectId;\r\n\r\n@Document\r\npublic class Contact {\r\n\r\n    @ObjectId\r\n    private String id;\r\n    private String name;\r\n    private String email;\r\n    \r\n    //getters and setters go here.\r\n}\r\n```\r\n\r\n*wiki [How to create a document](https://github.com/javaboybr/MongOCOM/wiki/How-to-create-a-Document)*\r\n\r\n### Easy to use.\r\nMongOCOM is easy to use, no XML or complex configuration needed, just set up your project, add the library to the class path and start coding. \r\n\r\n```java\r\npackage com.example.main;\r\n\r\nimport com.example.collections.Contact;\r\nimport com.arquivolivre.mongocom.management.CollectionManager;\r\nimport com.arquivolivre.mongocom.management.CollectionManagerFactory;\r\n\r\npublic class Example {\r\n\r\n    public static void main(String[] args){\r\n        CollectionManager cm = CollectionManagerFactory.setup();\r\n        Contact myFirstContact = new Contact();\r\n        myFirstContact.setName(\"My Name\");\r\n        myFirstContact.setEmail(\"my_email@server.com\");\r\n        cm.insert(myFirstContact);\r\n        System.out.println(\"Contact _id: \" + myFirstContact.getId()\r\n                                           + \" inserted successfully.\");\r\n    }\r\n\r\n}\r\n```\r\n\r\nIf you want to help us, feel free to fork or contribute.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}